import { QueryDidsWithClaimsArgs, QueryEventByAddedTrustedClaimIssuerArgs, QueryEventsByIndexedArgsArgs, QueryGetHistoryOfPaymentEventsForCaArgs, QueryGetWithholdingTaxesOfCaArgs, QueryInvestmentsArgs, QueryIssuerDidsWithClaimsByTargetArgs, QueryProposalArgs, QueryProposalsArgs, QueryProposalVotesArgs, QueryScopesByIdentityArgs, QuerySettlementsArgs, QueryTickerExternalAgentActionsArgs, QueryTickerExternalAgentHistoryArgs, QueryTokensByTrustedClaimIssuerArgs, QueryTokensHeldByDidArgs, QueryTransactionByHashArgs, QueryTransactionsArgs } from "./types";
import { GraphqlQuery } from "../types/internal";
/**
 * @hidden
 *
 * Get the current voters list for given pipId
 */
export declare function proposalVotes(variables: QueryProposalVotesArgs): GraphqlQuery<QueryProposalVotesArgs>;
/**
 * @hidden
 *
 * Get all dids with at least one claim for a given scope and from one the given trustedClaimIssuers
 */
export declare function didsWithClaims(variables: QueryDidsWithClaimsArgs): GraphqlQuery<QueryDidsWithClaimsArgs>;
/**
 * @hidden
 *
 * Get a single event by any of its indexed arguments
 */
export declare function eventByIndexedArgs(variables: QueryEventsByIndexedArgsArgs): GraphqlQuery<QueryEventsByIndexedArgsArgs>;
/**
 * @hidden
 *
 * Get all events by any of its indexed arguments
 */
export declare function eventsByIndexedArgs(variables: QueryEventsByIndexedArgsArgs): GraphqlQuery<QueryEventsByIndexedArgsArgs>;
/**
 * @hidden
 *
 * Get a transaction by hash
 */
export declare function transactionByHash(variables: QueryTransactionByHashArgs): GraphqlQuery<QueryTransactionByHashArgs>;
/**
 * @hidden
 *
 * Get all proposals optionally filtered by pipId, proposer or state
 */
export declare function proposals(variables?: QueryProposalsArgs): GraphqlQuery<QueryProposalsArgs | undefined>;
/**
 * @hidden
 *
 * Get the tickers of all the Assets for which the passed DID is a trusted claim issuer
 */
export declare function tokensByTrustedClaimIssuer(variables: QueryTokensByTrustedClaimIssuerArgs): GraphqlQuery<QueryTokensByTrustedClaimIssuerArgs>;
/**
 * @hidden
 *
 * Get all tickers of Assets that were held at some point by the given did
 */
export declare function tokensHeldByDid(variables: QueryTokensHeldByDidArgs): GraphqlQuery<QueryTokensHeldByDidArgs>;
/**
 * @hidden
 *
 * Get transactions
 */
export declare function transactions(variables?: QueryTransactionsArgs): GraphqlQuery<QueryTransactionsArgs | undefined>;
/**
 * @hidden
 *
 * Get the scopes (and ticker, if applicable) of claims issued on an Identity
 */
export declare function scopesByIdentity(variables: QueryScopesByIdentityArgs): GraphqlQuery<QueryScopesByIdentityArgs>;
/**
 * @hidden
 *
 * Get issuer dids with at least one claim for given target
 */
export declare function issuerDidsWithClaimsByTarget(variables: QueryIssuerDidsWithClaimsByTargetArgs): GraphqlQuery<QueryIssuerDidsWithClaimsByTargetArgs>;
/**
 * @hidden
 *
 * Get a proposal by its pipId
 */
export declare function proposal(variables: QueryProposalArgs): GraphqlQuery<QueryProposalArgs>;
/**
 * @hidden
 *
 * Fetch the number of the latest block that has been processed by the middleware
 */
export declare function latestProcessedBlock(): GraphqlQuery;
/**
 * @hidden
 *
 * Middleware heartbeat
 */
export declare function heartbeat(): GraphqlQuery;
/**
 * @hidden
 *
 * Get an added trusted claim issuer event by its indexed arguments
 */
export declare function eventByAddedTrustedClaimIssuer(variables: QueryEventByAddedTrustedClaimIssuerArgs): GraphqlQuery<QueryEventByAddedTrustedClaimIssuerArgs>;
/**
 * @hidden
 *
 * Get Settlements where a Portfolio is involved
 */
export declare function settlements(variables: QuerySettlementsArgs): GraphqlQuery<QuerySettlementsArgs>;
/**
 * @hidden
 *
 * Get all investments for a given offering
 */
export declare function investments(variables: QueryInvestmentsArgs): GraphqlQuery<QueryInvestmentsArgs>;
/**
 * @hidden
 *
 * Get current amount of withheld tax for a distribution
 */
export declare function getWithholdingTaxesOfCa(variables: QueryGetWithholdingTaxesOfCaArgs): GraphqlQuery<QueryGetWithholdingTaxesOfCaArgs>;
/**
 * @hidden
 *
 * Get history of claims for a distribution
 */
export declare function getHistoryOfPaymentEventsForCa(variables: QueryGetHistoryOfPaymentEventsForCaArgs): GraphqlQuery<QueryGetHistoryOfPaymentEventsForCaArgs>;
/**
 * @hidden
 *
 * Get the transaction history of each external agent of an Asset
 */
export declare function tickerExternalAgentHistory(variables: QueryTickerExternalAgentHistoryArgs): GraphqlQuery<QueryTickerExternalAgentHistoryArgs>;
/**
 * @hidden
 *
 * Get list of Events triggered by actions (from the set of actions that can only be performed by external agents) that have been performed on a specific Asset
 */
export declare function tickerExternalAgentActions(variables: QueryTickerExternalAgentActionsArgs): GraphqlQuery<QueryTickerExternalAgentActionsArgs>;
//# sourceMappingURL=queries.d.ts.map