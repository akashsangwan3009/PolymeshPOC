import { Asset, Context, Identity, ModifyCaDefaultConfigParams, ModifyCorporateActionsAgentParams, Namespace, RemoveCorporateActionParams } from "../../../../internal";
import { NoArgsProcedureMethod, ProcedureMethod } from "../../../../types";
import { Distributions } from './Distributions';
import { CorporateActionDefaultConfig } from './types';
/**
 * Handles all Asset Corporate Actions related functionality
 */
export declare class CorporateActions extends Namespace<Asset> {
    distributions: Distributions;
    /**
     * @hidden
     */
    constructor(parent: Asset, context: Context);
    /**
     * Assign default config values(targets, global tax withholding percentage and per-Identity tax withholding percentages)
     *
     * @note These config values are applied to every Corporate Action that is created until they are modified. Modifying these values
     *   does not impact existing Corporate Actions.
     *   When creating a Corporate Action, values passed explicitly will override these default config values
     */
    setDefaultConfig: ProcedureMethod<ModifyCaDefaultConfigParams, void>;
    /**
     * Assign a new Corporate Actions Agent for the Asset
     *
     * @note this may create {@link AuthorizationRequest | Authorization Requests} which have to be accepted by the `target` Identity.
     *   An {@link Account} or {@link Identity} can fetch its pending Authorization Requests by calling {@link Authorizations.getReceived | authorizations.getReceived}.
     *   Also, an Account or Identity can directly fetch the details of an Authorization Request by calling {@link Authorizations.getOne | authorizations.getOne}
     *
     * @deprecated in favor of `inviteAgent`
     */
    setAgent: ProcedureMethod<ModifyCorporateActionsAgentParams, void>;
    /**
     * Remove the Corporate Actions Agent of the Asset
     *
     * @note this action will leave the Asset owner as the Corporate Actions Agent
     *
     * @deprecated
     */
    removeAgent: NoArgsProcedureMethod<void>;
    /**
     * Remove a Corporate Action
     */
    remove: ProcedureMethod<RemoveCorporateActionParams, void>;
    /**
     * Retrieve a list of agent Identities
     */
    getAgents(): Promise<Identity[]>;
    /**
     * Retrieve default config comprising of targets, global tax withholding percentage and per-Identity tax withholding percentages.
     *
     *
     * @note This config is applied to every Corporate Action that is created until they are modified. Modifying the default config
     *   does not impact existing Corporate Actions.
     *   When creating a Corporate Action, values passed explicitly will override this default config
     */
    getDefaultConfig(): Promise<CorporateActionDefaultConfig>;
}
//# sourceMappingURL=index.d.ts.map