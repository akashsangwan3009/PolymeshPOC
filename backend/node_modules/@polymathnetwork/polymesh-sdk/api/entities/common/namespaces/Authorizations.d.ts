import BigNumber from 'bignumber.js';
import { Authorization } from "../../../../polkadot/types";
import { AuthorizationRequest, Namespace } from "../../../../internal";
import { AuthorizationType, Signer, SignerValue } from "../../../../types";
/**
 * Handles all Authorization related functionality
 */
export declare class Authorizations<Parent extends Signer> extends Namespace<Parent> {
    /**
     * Fetch all pending Authorization Requests for which this Signer is the target
     *
     * @param opts.type - fetch only authorizations of this type. Fetches all types if not passed
     * @param opts.includeExpired - whether to include expired authorizations. Defaults to true
     */
    getReceived(opts?: {
        type?: AuthorizationType;
        includeExpired?: boolean;
    }): Promise<AuthorizationRequest[]>;
    /**
     * Retrieve a single Authorization Request targeting this Signer by its ID
     *
     * @throws if there is no Authorization Request with the passed ID targeting this Signer
     */
    getOne(args: {
        id: BigNumber;
    }): Promise<AuthorizationRequest>;
    /**
     * @hidden
     *
     * Create an array of AuthorizationRequests from an array of on-chain Authorizations
     */
    protected createAuthorizationRequests(auths: {
        auth: Authorization;
        target: SignerValue;
    }[]): AuthorizationRequest[];
}
//# sourceMappingURL=Authorizations.d.ts.map