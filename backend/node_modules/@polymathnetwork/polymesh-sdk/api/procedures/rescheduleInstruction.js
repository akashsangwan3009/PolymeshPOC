"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rescheduleInstruction = exports.prepareRescheduleInstruction = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
/**
 * @hidden
 */
function prepareRescheduleInstruction(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, } = this;
        const { id } = args;
        const instruction = new internal_1.Instruction({ id }, context);
        const { status } = yield instruction.details();
        if (status !== types_1.InstructionStatus.Failed) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'Only failed Instructions can be rescheduled',
                data: {
                    instructionStatus: status,
                },
            });
        }
        const rawId = (0, conversion_1.bigNumberToU64)(id, context);
        this.addTransaction({
            transaction: tx.settlement.rescheduleInstruction,
            args: [rawId],
        });
        return instruction;
    });
}
exports.prepareRescheduleInstruction = prepareRescheduleInstruction;
/**
 * @hidden
 */
const rescheduleInstruction = () => new internal_1.Procedure(prepareRescheduleInstruction, {
    permissions: {
        transactions: [types_1.TxTags.settlement.RescheduleInstruction],
    },
});
exports.rescheduleInstruction = rescheduleInstruction;
//# sourceMappingURL=rescheduleInstruction.js.map