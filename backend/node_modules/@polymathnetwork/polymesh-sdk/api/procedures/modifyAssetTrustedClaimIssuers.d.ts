import { Asset, Identity, Procedure } from "../../internal";
import { InputTrustedClaimIssuer } from "../../types";
import { ProcedureAuthorization, TrustedClaimIssuerOperation } from "../../types/internal";
export interface ModifyAssetTrustedClaimIssuersAddSetParams {
    claimIssuers: InputTrustedClaimIssuer[];
}
export interface ModifyAssetTrustedClaimIssuersRemoveParams {
    /**
     * array of Identities (or DIDs) of the default claim issuers
     */
    claimIssuers: (string | Identity)[];
}
/**
 * @hidden
 */
export declare type Params = {
    ticker: string;
} & ((ModifyAssetTrustedClaimIssuersAddSetParams & {
    operation: TrustedClaimIssuerOperation.Add | TrustedClaimIssuerOperation.Set;
}) | (ModifyAssetTrustedClaimIssuersRemoveParams & {
    operation: TrustedClaimIssuerOperation.Remove;
}));
/**
 * @hidden
 */
export declare function prepareModifyAssetTrustedClaimIssuers(this: Procedure<Params, Asset>, args: Params): Promise<Asset>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, Asset>, { ticker, operation }: Params): ProcedureAuthorization;
/**
 * @hidden
 */
export declare const modifyAssetTrustedClaimIssuers: () => Procedure<Params, Asset>;
//# sourceMappingURL=modifyAssetTrustedClaimIssuers.d.ts.map