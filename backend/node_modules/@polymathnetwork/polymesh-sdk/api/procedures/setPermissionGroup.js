"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setPermissionGroup = exports.prepareStorage = exports.getAuthorization = exports.prepareSetPermissionGroup = void 0;
const utils_1 = require("./utils");
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const utils_2 = require("../../utils");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
const agentGroupResolver = (group, context) => (0, conversion_1.permissionGroupIdentifierToAgentGroup)(group instanceof internal_1.CustomPermissionGroup ? { custom: group.id } : group.type, context);
/**
 * @hidden
 */
function prepareSetPermissionGroup(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx: { externalAgents }, }, }, context, storage: { asset }, } = this;
        const { identity, group } = args;
        const { ticker } = asset;
        const [currentGroup, currentAgents] = yield Promise.all([
            identity.assetPermissions.getGroup({ asset: asset }),
            asset.permissions.getAgents(),
        ]);
        if ((0, utils_1.isFullGroupType)(currentGroup)) {
            const fullGroupAgents = currentAgents.filter(({ group: groupOfAgent }) => (0, utils_1.isFullGroupType)(groupOfAgent));
            if (fullGroupAgents.length === 1) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.EntityInUse,
                    message: 'The target is the last Agent with full permissions for this Asset. There should always be at least one Agent with full permissions',
                });
            }
        }
        if (!currentAgents.find(({ agent }) => agent.isEqual(identity))) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'The target must already be an Agent for the Asset',
            });
        }
        let returnValue;
        let rawAgentGroup;
        if (!(0, utils_2.isEntity)(group)) {
            returnValue = yield this.addProcedure((0, internal_1.createGroup)(), {
                ticker,
                permissions: group,
            });
            rawAgentGroup = returnValue.transform(customPermissionGroup => agentGroupResolver(customPermissionGroup, context));
        }
        else {
            if (group.isEqual(currentGroup)) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.NoDataChange,
                    message: 'The Agent is already part of this permission group',
                });
            }
            returnValue = group;
            rawAgentGroup = agentGroupResolver(group, context);
        }
        const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
        const rawIdentityId = (0, conversion_1.stringToIdentityId)(identity.did, context);
        this.addTransaction({
            transaction: externalAgents.changeGroup,
            args: [rawTicker, rawIdentityId, rawAgentGroup],
        });
        return returnValue;
    });
}
exports.prepareSetPermissionGroup = prepareSetPermissionGroup;
/**
 * @hidden
 */
function getAuthorization() {
    const { storage: { asset }, } = this;
    return {
        permissions: {
            transactions: [types_1.TxTags.externalAgents.ChangeGroup],
            assets: [asset],
            portfolios: [],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
function prepareStorage({ group: { asset } }) {
    const { context } = this;
    return {
        asset: (0, internal_2.asAsset)(asset, context),
    };
}
exports.prepareStorage = prepareStorage;
/**
 * @hidden
 */
const setPermissionGroup = () => new internal_1.Procedure(prepareSetPermissionGroup, getAuthorization, prepareStorage);
exports.setPermissionGroup = setPermissionGroup;
//# sourceMappingURL=setPermissionGroup.js.map