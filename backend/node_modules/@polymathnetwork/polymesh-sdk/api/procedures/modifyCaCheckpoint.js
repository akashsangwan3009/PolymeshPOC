"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.modifyCaCheckpoint = exports.getAuthorization = exports.prepareModifyCaCheckpoint = void 0;
const utils_1 = require("./utils");
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareModifyCaCheckpoint(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, } = this;
        const { checkpoint, corporateAction: { id: localId, asset: { ticker }, }, } = args;
        let checkpointValue;
        if (checkpoint) {
            checkpointValue = yield (0, internal_2.getCheckpointValue)(checkpoint, ticker, context);
            yield (0, utils_1.assertCaCheckpointValid)(checkpointValue);
        }
        const rawCaId = (0, conversion_1.corporateActionIdentifierToCaId)({ ticker, localId }, context);
        const rawRecordDateSpec = (0, internal_2.optionize)(conversion_1.checkpointToRecordDateSpec)(checkpointValue, context);
        this.addTransaction({
            transaction: tx.corporateAction.changeRecordDate,
            args: [rawCaId, rawRecordDateSpec],
        });
    });
}
exports.prepareModifyCaCheckpoint = prepareModifyCaCheckpoint;
/**
 * @hidden
 */
function getAuthorization({ corporateAction: { asset: { ticker }, }, }) {
    const { context } = this;
    return {
        permissions: {
            transactions: [types_1.TxTags.corporateAction.ChangeRecordDate],
            assets: [new internal_1.Asset({ ticker }, context)],
            portfolios: [],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const modifyCaCheckpoint = () => new internal_1.Procedure(prepareModifyCaCheckpoint, getAuthorization);
exports.modifyCaCheckpoint = modifyCaCheckpoint;
//# sourceMappingURL=modifyCaCheckpoint.js.map