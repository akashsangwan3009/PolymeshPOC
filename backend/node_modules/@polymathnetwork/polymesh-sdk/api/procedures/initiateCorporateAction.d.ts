import { ISubmittableResult } from '@polkadot/types/types';
import BigNumber from 'bignumber.js';
import { CAId } from "../../polkadot/types";
import { PostTransactionValue, Procedure } from "../../internal";
import { CorporateActionKind, CorporateActionTargets, Identity, InputCaCheckpoint, TaxWithholding } from "../../types";
import { ProcedureAuthorization } from "../../types/internal";
import { Modify } from "../../types/utils";
/**
 * @hidden
 */
export declare const createCaIdResolver: () => (receipt: ISubmittableResult) => CAId;
/**
 * @hidden
 */
export interface InitiateCorporateActionParams {
    kind: CorporateActionKind;
    /**
     * date at which the issuer publicly declared the Corporate Action. Optional, defaults to the current date
     */
    declarationDate?: Date;
    /**
     * checkpoint to be used for share-related calculations. If a Schedule is passed, the next Checkpoint it creates will be used
     */
    checkpoint?: InputCaCheckpoint;
    description: string;
    /**
     * Asset Holder Identities to be included (or excluded) from the Corporate Action. Inclusion/exclusion is controlled by the `treatment`
     *   property. When the value is `Include`, all Asset Holders not present in the array are excluded, and vice-versa
     */
    targets?: Modify<CorporateActionTargets, {
        identities: (string | Identity)[];
    }>;
    /**
     * default percentage (0-100) of the Benefits to be held for tax purposes
     */
    defaultTaxWithholding?: BigNumber;
    /**
     * percentage (0-100) of the Benefits to be held for tax purposes from individual Asset Holder Identities.
     *   This overrides the value of `defaultTaxWithholding`
     */
    taxWithholdings?: Modify<TaxWithholding, {
        identity: string | Identity;
    }>[];
}
export declare type Params = InitiateCorporateActionParams & {
    ticker: string;
};
/**
 * @hidden
 */
export declare function prepareInitiateCorporateAction(this: Procedure<Params, CAId>, args: Params): Promise<PostTransactionValue<CAId>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, CAId>, { ticker }: Params): ProcedureAuthorization;
/**
 * @hidden
 */
export declare const initiateCorporateAction: () => Procedure<Params, CAId>;
//# sourceMappingURL=initiateCorporateAction.d.ts.map