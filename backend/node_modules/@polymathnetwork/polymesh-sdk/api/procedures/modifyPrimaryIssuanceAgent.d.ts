import { Identity, Procedure } from "../../internal";
import { ProcedureAuthorization } from "../../types/internal";
export interface ModifyPrimaryIssuanceAgentParams {
    /**
     * Identity to be set as primary issuance agent
     */
    target: string | Identity;
    /**
     * date at which the authorization request to modify the primary issuance agent expires (optional, never expires if a date is not provided)
     */
    requestExpiry?: Date;
}
/**
 * @hidden
 */
export declare type Params = ModifyPrimaryIssuanceAgentParams & {
    ticker: string;
};
/**
 * @hidden
 *
 * @deprecated in favor of `inviteAgent`
 */
export declare function prepareModifyPrimaryIssuanceAgent(this: Procedure<Params, void>, args: Params): Promise<void>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params>, { ticker }: Params): ProcedureAuthorization;
/**
 * @hidden
 */
export declare const modifyPrimaryIssuanceAgent: () => Procedure<Params, void>;
//# sourceMappingURL=modifyPrimaryIssuanceAgent.d.ts.map