import { Asset, Procedure } from "../../internal";
import { InputCondition } from "../../types";
import { ProcedureAuthorization } from "../../types/internal";
export interface SetAssetRequirementsParams {
    /**
     * array of array of conditions. For a transfer to be successful, it must comply with all the conditions of at least one of the arrays.
     *   In other words, higher level arrays are *OR* between them, while conditions inside each array are *AND* between them
     */
    requirements: InputCondition[][];
}
/**
 * @hidden
 */
export declare type Params = SetAssetRequirementsParams & {
    ticker: string;
};
/**
 * @hidden
 */
export declare function prepareSetAssetRequirements(this: Procedure<Params, Asset>, args: Params): Promise<Asset>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, Asset>, { ticker, requirements }: Params): ProcedureAuthorization;
/**
 * @hidden
 */
export declare const setAssetRequirements: () => Procedure<Params, Asset>;
//# sourceMappingURL=setAssetRequirements.d.ts.map