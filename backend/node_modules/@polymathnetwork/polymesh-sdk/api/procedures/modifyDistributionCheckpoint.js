"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.modifyDistributionCheckpoint = exports.getAuthorization = exports.prepareModifyDistributionCheckpoint = void 0;
const utils_1 = require("./utils");
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareModifyDistributionCheckpoint(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { checkpoint, distribution, distribution: { paymentDate, expiryDate, asset }, } = args;
        const now = new Date();
        if (paymentDate <= now) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'Cannot modify a Distribution checkpoint after the payment date',
            });
        }
        const checkpointValue = yield (0, internal_2.getCheckpointValue)(checkpoint, asset, this.context);
        if (!(checkpointValue instanceof internal_1.Checkpoint)) {
            yield (0, utils_1.assertDistributionDatesValid)(checkpointValue, paymentDate, expiryDate);
        }
        yield this.addProcedure((0, internal_1.modifyCaCheckpoint)(), {
            checkpoint,
            corporateAction: distribution,
        });
    });
}
exports.prepareModifyDistributionCheckpoint = prepareModifyDistributionCheckpoint;
/**
 * @hidden
 */
function getAuthorization({ distribution: { asset: { ticker }, }, }) {
    const { context } = this;
    return {
        permissions: {
            transactions: [types_1.TxTags.corporateAction.ChangeRecordDate],
            assets: [new internal_1.Asset({ ticker }, context)],
            portfolios: [],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const modifyDistributionCheckpoint = () => new internal_1.Procedure(prepareModifyDistributionCheckpoint, getAuthorization);
exports.modifyDistributionCheckpoint = modifyDistributionCheckpoint;
//# sourceMappingURL=modifyDistributionCheckpoint.js.map