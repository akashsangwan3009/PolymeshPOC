import { Account, AuthorizationRequest, Procedure } from "../../internal";
import { ProcedureAuthorization } from "../../types/internal";
/**
 * @hidden
 */
export interface ConsumeJoinOrRotateAuthorizationParams {
    authRequest: AuthorizationRequest;
    accept: boolean;
}
export interface Storage {
    signingAccount: Account;
    calledByTarget: boolean;
}
/**
 * @hidden
 *
 * Consumes JoinIdentity, RotatePrimaryKey and RotatePrimaryKeyToSecondaryKey Authorizations
 */
export declare function prepareConsumeJoinOrRotateAuthorization(this: Procedure<ConsumeJoinOrRotateAuthorizationParams, void, Storage>, args: ConsumeJoinOrRotateAuthorizationParams): Promise<void>;
/**
 * @hidden
 *
 * - If the auth is being accepted, we check that the caller is the target
 * - If the auth is being rejected, we check that the caller is either the target or the issuer
 */
export declare function getAuthorization(this: Procedure<ConsumeJoinOrRotateAuthorizationParams, void, Storage>, { authRequest, accept }: ConsumeJoinOrRotateAuthorizationParams): Promise<ProcedureAuthorization>;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<ConsumeJoinOrRotateAuthorizationParams, void, Storage>, { authRequest: { target } }: ConsumeJoinOrRotateAuthorizationParams): Promise<Storage>;
/**
 * @hidden
 */
export declare const consumeJoinOrRotateAuthorization: () => Procedure<ConsumeJoinOrRotateAuthorizationParams, void, Storage>;
//# sourceMappingURL=consumeJoinOrRotateAuthorization.d.ts.map