import { Asset, Procedure } from "../../internal";
import { SecurityIdentifier } from "../../types";
import { ProcedureAuthorization } from "../../types/internal";
export declare type ModifyAssetParams = {
    /**
     * makes an indivisible Asset divisible
     */
    makeDivisible?: true;
    name: string;
    fundingRound?: string;
    identifiers?: SecurityIdentifier[];
} | {
    makeDivisible: true;
    name?: string;
    fundingRound?: string;
    identifiers?: SecurityIdentifier[];
} | {
    makeDivisible?: true;
    name?: string;
    fundingRound: string;
    identifiers?: SecurityIdentifier[];
} | {
    makeDivisible?: true;
    name?: string;
    fundingRound?: string;
    identifiers: SecurityIdentifier[];
};
/**
 * @hidden
 */
export declare type Params = {
    ticker: string;
} & ModifyAssetParams;
/**
 * @hidden
 */
export declare function prepareModifyAsset(this: Procedure<Params, Asset>, args: Params): Promise<Asset>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, Asset>, { ticker, makeDivisible, name, fundingRound, identifiers }: Params): ProcedureAuthorization;
/**
 * @hidden
 */
export declare const modifyAsset: () => Procedure<Params, Asset>;
//# sourceMappingURL=modifyAsset.d.ts.map