import { DocumentId } from "../../polkadot/types";
import { Asset, Procedure } from "../../internal";
import { AssetDocument } from "../../types";
import { ProcedureAuthorization } from "../../types/internal";
export interface SetAssetDocumentsParams {
    /**
     * list of documents
     */
    documents: AssetDocument[];
}
export interface Storage {
    currentDocIds: DocumentId[];
    currentDocs: AssetDocument[];
}
/**
 * @hidden
 */
export declare type Params = SetAssetDocumentsParams & {
    ticker: string;
};
/**
 * @hidden
 */
export declare function prepareSetAssetDocuments(this: Procedure<Params, Asset, Storage>, args: Params): Promise<Asset>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, Asset, Storage>, { ticker, documents }: Params): ProcedureAuthorization;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<Params, Asset, Storage>, { ticker }: Params): Promise<Storage>;
/**
 * @hidden
 */
export declare const setAssetDocuments: () => Procedure<Params, Asset, Storage>;
//# sourceMappingURL=setAssetDocuments.d.ts.map