import { Asset, Procedure } from "../../internal";
import { InputCondition } from "../../types";
import { ProcedureAuthorization } from "../../types/internal";
export interface AddAssetRequirementParams {
    /**
     * array of conditions that form the requirement that must be added.
     *   Conditions within a requirement are *AND* between them. This means that in order
     *   for a transfer to comply with this requirement, it must fulfill *ALL* conditions
     */
    conditions: InputCondition[];
}
/**
 * @hidden
 */
export declare type Params = AddAssetRequirementParams & {
    ticker: string;
};
/**
 * @hidden
 */
export declare function prepareAddAssetRequirement(this: Procedure<Params, Asset>, args: Params): Promise<Asset>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, Asset>, { ticker }: Params): ProcedureAuthorization;
/**
 * @hidden
 */
export declare const addAssetRequirement: () => Procedure<Params, Asset>;
//# sourceMappingURL=addAssetRequirement.d.ts.map