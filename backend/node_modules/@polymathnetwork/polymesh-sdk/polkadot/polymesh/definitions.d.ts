declare const _default: {
    rpc: {};
    types: {
        Address: string;
        LookupSource: string;
        AccountInfo: string;
        IdentityId: string;
        EventDid: string;
        EventCounts: string;
        ErrorAt: string;
        InvestorUid: string;
        Ticker: string;
        CddId: string;
        ScopeId: string;
        PosRatio: string;
        DocumentId: string;
        DocumentName: string;
        DocumentUri: string;
        DocumentHash: {
            _enum: {
                None: string;
                H512: string;
                H384: string;
                H320: string;
                H256: string;
                H224: string;
                H192: string;
                H160: string;
                H128: string;
            };
        };
        DocumentType: string;
        Document: {
            uri: string;
            content_hash: string;
            name: string;
            doc_type: string;
            filing_date: string;
        };
        Version: string;
        CustomAssetTypeId: string;
        AssetType: {
            _enum: {
                EquityCommon: string;
                EquityPreferred: string;
                Commodity: string;
                FixedIncome: string;
                REIT: string;
                Fund: string;
                RevenueShareAgreement: string;
                StructuredProduct: string;
                Derivative: string;
                Custom: string;
                StableCoin: string;
            };
        };
        AssetIdentifier: {
            _enum: {
                CUSIP: string;
                CINS: string;
                ISIN: string;
                LEI: string;
            };
        };
        AssetOwnershipRelation: {
            _enum: {
                NotOwned: string;
                TickerOwned: string;
                AssetOwned: string;
            };
        };
        AssetName: string;
        FundingRoundName: string;
        VenueDetails: string;
        SecurityToken: {
            total_supply: string;
            owner_did: string;
            divisible: string;
            asset_type: string;
        };
        PalletName: string;
        DispatchableName: string;
        AssetPermissions: {
            _enum: {
                Whole: string;
                These: string;
                Except: string;
            };
        };
        PortfolioPermissions: {
            _enum: {
                Whole: string;
                These: string;
                Except: string;
            };
        };
        DispatchableNames: {
            _enum: {
                Whole: string;
                These: string;
                Except: string;
            };
        };
        PalletPermissions: {
            pallet_name: string;
            dispatchable_names: string;
        };
        ExtrinsicPermissions: {
            _enum: {
                Whole: string;
                These: string;
                Except: string;
            };
        };
        Permissions: {
            asset: string;
            extrinsic: string;
            portfolio: string;
        };
        LegacyPalletPermissions: {
            pallet_name: string;
            total: string;
            dispatchable_names: string;
        };
        LegacyPermissions: {
            asset: string;
            extrinsic: string;
            portfolio: string;
        };
        Signatory: {
            _enum: {
                Identity: string;
                Account: string;
            };
        };
        SecondaryKey: {
            signer: string;
            permissions: string;
        };
        SecondaryKeyWithAuth: {
            secondary_key: string;
            auth_signature: string;
        };
        Subsidy: {
            paying_key: string;
            remaining: string;
        };
        IdentityRole: {
            _enum: string[];
        };
        PreAuthorizedKeyInfo: {
            target_id: string;
            secondary_key: string;
        };
        DidRecord: {
            primary_key: string;
            secondary_keys: string;
        };
        KeyIdentityData: {
            identity: string;
            permissions: string;
        };
        CountryCode: {
            _enum: string[];
        };
        Scope: {
            _enum: {
                Identity: string;
                Ticker: string;
                Custom: string;
            };
        };
        InvestorZKProofData: string;
        Scalar: string;
        RistrettoPoint: string;
        ZkProofData: {
            challenge_responses: string;
            subtract_expressions_res: string;
            blinded_scope_did_hash: string;
        };
        ScopeClaimProof: {
            proof_scope_id_wellformed: string;
            proof_scope_id_cdd_id_match: string;
            scope_id: string;
        };
        Claim: {
            _enum: {
                Accredited: string;
                Affiliate: string;
                BuyLockup: string;
                SellLockup: string;
                CustomerDueDiligence: string;
                KnowYourCustomer: string;
                Jurisdiction: string;
                Exempted: string;
                Blocked: string;
                InvestorUniqueness: string;
                NoData: string;
                InvestorUniquenessV2: string;
            };
        };
        ClaimType: {
            _enum: {
                Accredited: string;
                Affiliate: string;
                BuyLockup: string;
                SellLockup: string;
                CustomerDueDiligence: string;
                KnowYourCustomer: string;
                Jurisdiction: string;
                Exempted: string;
                Blocked: string;
                InvestorUniqueness: string;
                NoData: string;
                InvestorUniquenessV2: string;
            };
        };
        IdentityClaim: {
            claim_issuer: string;
            issuance_date: string;
            last_update_date: string;
            expiry: string;
            claim: string;
        };
        ComplianceRequirement: {
            sender_conditions: string;
            receiver_conditions: string;
            id: string;
        };
        ComplianceRequirementResult: {
            sender_conditions: string;
            receiver_conditions: string;
            id: string;
            result: string;
        };
        ConditionType: {
            _enum: {
                IsPresent: string;
                IsAbsent: string;
                IsAnyOf: string;
                IsNoneOf: string;
                IsIdentity: string;
            };
        };
        TrustedFor: {
            _enum: {
                Any: string;
                Specific: string;
            };
        };
        TrustedIssuer: {
            issuer: string;
            trusted_for: string;
        };
        Condition: {
            condition_type: string;
            issuers: string;
        };
        ConditionResult: {
            condition: string;
            result: string;
        };
        TargetIdAuthorization: {
            target_id: string;
            nonce: string;
            expires_at: string;
        };
        TickerRegistration: {
            owner: string;
            expiry: string;
        };
        TickerRegistrationConfig: {
            max_ticker_length: string;
            registration_length: string;
        };
        ClassicTickerRegistration: {
            eth_owner: string;
            is_created: string;
        };
        ClassicTickerImport: {
            eth_owner: string;
            ticker: string;
            is_contract: string;
            is_created: string;
        };
        EthereumAddress: string;
        EcdsaSignature: string;
        MotionTitle: string;
        MotionInfoLink: string;
        ChoiceTitle: string;
        Motion: {
            title: string;
            info_link: string;
            choices: string;
        };
        BallotTitle: string;
        BallotMeta: {
            title: string;
            motions: string;
        };
        BallotTimeRange: {
            start: string;
            end: string;
        };
        BallotVote: {
            power: string;
            fallback: string;
        };
        MaybeBlock: {
            _enum: {
                Some: string;
                None: string;
            };
        };
        Url: string;
        PipDescription: string;
        PipsMetadata: {
            id: string;
            url: string;
            description: string;
            created_at: string;
            transaction_version: string;
            expiry: string;
        };
        Proposer: {
            _enum: {
                Community: string;
                Committee: string;
            };
        };
        Committee: {
            _enum: {
                Technical: string;
                Upgrade: string;
            };
        };
        SkippedCount: string;
        SnapshottedPip: {
            id: string;
            weight: string;
        };
        SnapshotId: string;
        SnapshotMetadata: {
            created_at: string;
            made_by: string;
            id: string;
        };
        SnapshotResult: {
            _enum: {
                Approve: string;
                Reject: string;
                Skip: string;
            };
        };
        Beneficiary: {
            id: string;
            amount: string;
        };
        DepositInfo: {
            owner: string;
            amount: string;
        };
        PolymeshVotes: {
            index: string;
            ayes: string;
            nays: string;
            expiry: string;
        };
        PipId: string;
        ProposalState: {
            _enum: string[];
        };
        Pip: {
            id: string;
            proposal: string;
            state: string;
            proposer: string;
        };
        ProposalData: {
            _enum: {
                Hash: string;
                Proposal: string;
            };
        };
        OffChainSignature: {
            _enum: {
                Ed25519: string;
                Sr25519: string;
                Ecdsa: string;
            };
        };
        Authorization: {
            authorization_data: string;
            authorized_by: string;
            expiry: string;
            auth_id: string;
        };
        AuthorizationData: {
            _enum: {
                AttestPrimaryKeyRotation: string;
                RotatePrimaryKey: string;
                TransferTicker: string;
                AddMultiSigSigner: string;
                TransferAssetOwnership: string;
                JoinIdentity: string;
                PortfolioCustody: string;
                BecomeAgent: string;
                AddRelayerPayingKey: string;
                RotatePrimaryKeyToSecondary: string;
            };
        };
        SmartExtensionType: {
            _enum: {
                TransferManager: string;
                Offerings: string;
                SmartWallet: string;
                Custom: string;
            };
        };
        SmartExtensionName: string;
        SmartExtension: {
            extension_type: string;
            extension_name: string;
            extension_id: string;
            is_archive: string;
        };
        MetaUrl: string;
        MetaDescription: string;
        MetaVersion: string;
        ExtVersion: string;
        TemplateMetadata: {
            url: string;
            se_type: string;
            usage_fee: string;
            description: string;
            version: string;
        };
        TemplateDetails: {
            instantiation_fee: string;
            owner: string;
            frozen: string;
        };
        AuthorizationNonce: string;
        Counter: string;
        Percentage: string;
        TransferManager: {
            _enum: {
                CountTransferManager: string;
                PercentageTransferManager: string;
            };
        };
        RestrictionResult: {
            _enum: string[];
        };
        Memo: string;
        BridgeTx: {
            nonce: string;
            recipient: string;
            amount: string;
            tx_hash: string;
        };
        AssetCompliance: {
            paused: string;
            requirements: string;
        };
        AssetComplianceResult: {
            paused: string;
            requirements: string;
            result: string;
        };
        Claim1stKey: {
            target: string;
            claim_type: string;
        };
        Claim2ndKey: {
            issuer: string;
            scope: string;
        };
        InactiveMember: {
            id: string;
            deactivated_at: string;
            expiry: string;
        };
        VotingResult: {
            ayes_count: string;
            ayes_stake: string;
            nays_count: string;
            nays_stake: string;
        };
        ProtocolOp: {
            _enum: string[];
        };
        CddStatus: {
            _enum: {
                Ok: string;
                Err: string;
            };
        };
        AssetDidResult: {
            _enum: {
                Ok: string;
                Err: string;
            };
        };
        DidRecordsSuccess: {
            primary_key: string;
            secondary_keys: string;
        };
        DidRecords: {
            _enum: {
                Success: string;
                IdNotFound: string;
            };
        };
        VoteCountProposalFound: {
            ayes: string;
            nays: string;
        };
        VoteCount: {
            _enum: {
                ProposalFound: string;
                ProposalNotFound: string;
            };
        };
        Vote: string;
        VoteByPip: {
            pip: string;
            vote: string;
        };
        BridgeTxDetail: {
            amount: string;
            status: string;
            execution_block: string;
            tx_hash: string;
        };
        BridgeTxStatus: {
            _enum: {
                Absent: string;
                Pending: string;
                Frozen: string;
                Timelocked: string;
                Handled: string;
            };
        };
        HandledTxStatus: {
            _enum: {
                Success: string;
                Error: string;
            };
        };
        CappedFee: string;
        CanTransferResult: {
            _enum: {
                Ok: string;
                Err: string;
            };
        };
        AuthorizationType: {
            _enum: {
                AttestPrimaryKeyRotation: string;
                RotatePrimaryKey: string;
                TransferTicker: string;
                AddMultiSigSigner: string;
                TransferAssetOwnership: string;
                JoinIdentity: string;
                PortfolioCustody: string;
                BecomeAgent: string;
                AddRelayerPayingKey: string;
                RotatePrimaryKeyToSecondary: string;
            };
        };
        ProposalDetails: {
            approvals: string;
            rejections: string;
            status: string;
            expiry: string;
            auto_close: string;
        };
        ProposalStatus: {
            _enum: {
                Invalid: string;
                ActiveOrExpired: string;
                ExecutionSuccessful: string;
                ExecutionFailed: string;
                Rejected: string;
            };
        };
        DidStatus: {
            _enum: {
                Unknown: string;
                Exists: string;
                CddVerified: string;
            };
        };
        PortfolioName: string;
        PortfolioNumber: string;
        PortfolioKind: {
            _enum: {
                Default: string;
                User: string;
            };
        };
        PortfolioId: {
            did: string;
            kind: string;
        };
        Moment: string;
        CalendarUnit: {
            _enum: string[];
        };
        CalendarPeriod: {
            unit: string;
            amount: string;
        };
        CheckpointSchedule: {
            start: string;
            period: string;
        };
        CheckpointId: string;
        ScheduleId: string;
        StoredSchedule: {
            schedule: string;
            id: string;
            at: string;
            remaining: string;
        };
        ScheduleSpec: {
            start: string;
            period: string;
            remaining: string;
        };
        InstructionStatus: {
            _enum: {
                Unknown: string;
                Pending: string;
                Failed: string;
            };
        };
        LegStatus: {
            _enum: {
                PendingTokenLock: string;
                ExecutionPending: string;
                ExecutionToBeSkipped: string;
            };
        };
        AffirmationStatus: {
            _enum: {
                Unknown: string;
                Pending: string;
                Affirmed: string;
            };
        };
        SettlementType: {
            _enum: {
                SettleOnAffirmation: string;
                SettleOnBlock: string;
            };
        };
        LegId: string;
        InstructionId: string;
        Instruction: {
            instruction_id: string;
            venue_id: string;
            status: string;
            settlement_type: string;
            created_at: string;
            trade_date: string;
            value_date: string;
        };
        Leg: {
            from: string;
            to: string;
            asset: string;
            amount: string;
        };
        Venue: {
            creator: string;
            venue_type: string;
        };
        Receipt: {
            receipt_uid: string;
            from: string;
            to: string;
            asset: string;
            amount: string;
        };
        ReceiptMetadata: string;
        ReceiptDetails: {
            receipt_uid: string;
            leg_id: string;
            signer: string;
            signature: string;
            metadata: string;
        };
        UniqueCall: {
            nonce: string;
            call: string;
        };
        MovePortfolioItem: {
            ticker: string;
            amount: string;
            memo: string;
        };
        WeightToFeeCoefficient: {
            coeffInteger: string;
            coeffFrac: string;
            negative: string;
            degree: string;
        };
        TargetIdentity: {
            _enum: {
                ExternalAgent: string;
                Specific: string;
            };
        };
        FundraiserId: string;
        FundraiserName: string;
        FundraiserStatus: {
            _enum: string[];
        };
        FundraiserTier: {
            total: string;
            price: string;
            remaining: string;
        };
        Fundraiser: {
            creator: string;
            offering_portfolio: string;
            offering_asset: string;
            raising_portfolio: string;
            raising_asset: string;
            tiers: string;
            venue_id: string;
            start: string;
            end: string;
            status: string;
            minimum_investment: string;
        };
        VenueId: string;
        VenueType: {
            _enum: string[];
        };
        ExtensionAttributes: {
            usage_fee: string;
            version: string;
        };
        Tax: string;
        TargetIdentities: {
            identities: string;
            treatment: string;
        };
        TargetTreatment: {
            _enum: string[];
        };
        CAKind: {
            _enum: string[];
        };
        CADetails: string;
        CACheckpoint: {
            _enum: {
                Scheduled: string;
                Existing: string;
            };
        };
        RecordDate: {
            date: string;
            checkpoint: string;
        };
        RecordDateSpec: {
            _enum: {
                Scheduled: string;
                ExistingSchedule: string;
                Existing: string;
            };
        };
        CorporateAction: {
            kind: string;
            decl_date: string;
            record_date: string;
            targets: string;
            default_withholding_tax: string;
            withholding_tax: string;
        };
        LocalCAId: string;
        CAId: {
            ticker: string;
            local_id: string;
        };
        Distribution: {
            from: string;
            currency: string;
            per_share: string;
            amount: string;
            remaining: string;
            reclaimed: string;
            payment_at: string;
            expires_at: string;
        };
        SlashingSwitch: {
            _enum: string[];
        };
        PriceTier: {
            total: string;
            price: string;
        };
        PermissionedIdentityPrefs: {
            intended_count: string;
            running_count: string;
        };
        GranularCanTransferResult: {
            invalid_granularity: string;
            self_transfer: string;
            invalid_receiver_cdd: string;
            invalid_sender_cdd: string;
            missing_scope_claim: string;
            receiver_custodian_error: string;
            sender_custodian_error: string;
            sender_insufficient_balance: string;
            portfolio_validity_result: string;
            asset_frozen: string;
            statistics_result: string;
            compliance_result: string;
            result: string;
        };
        PortfolioValidityResult: {
            receiver_is_same_portfolio: string;
            sender_portfolio_does_not_exist: string;
            receiver_portfolio_does_not_exist: string;
            sender_insufficient_balance: string;
            result: string;
        };
        TransferManagerResult: {
            tm: string;
            result: string;
        };
        AGId: string;
        AgentGroup: {
            _enum: {
                Full: string;
                Custom: string;
                ExceptMeta: string;
                PolymeshV1CAA: string;
                PolymeshV1PIA: string;
            };
        };
        ItnRewardStatus: {
            _enum: {
                Unclaimed: string;
                Claimed: string;
            };
        };
    };
};
export default _default;
//# sourceMappingURL=definitions.d.ts.map