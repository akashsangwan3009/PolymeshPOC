import { SubmittableExtrinsic } from '@polkadot/api/types';
import { ISubmittableResult } from '@polkadot/types/types';
import BigNumber from 'bignumber.js';
import { Context, PolymeshTransactionBase } from "../internal";
import { BatchTransactionSpec, MapTxData } from "../types/internal";
/**
 * Wrapper class for a batch of Polymesh Transactions
 */
export declare class PolymeshTransactionBatch<Args extends unknown[][] = unknown[][], Values extends unknown[] = unknown[]> extends PolymeshTransactionBase<Values> {
    /**
     * @hidden
     *
     * unwrapped transaction data (available right before execution)
     */
    private unwrappedTransactions?;
    /**
     * @hidden
     *
     * underlying transactions to be batched, together with their respective arguments
     */
    private inputTransactions;
    /**
     * @hidden
     */
    constructor(transactionSpec: BatchTransactionSpec<Args, Values>, context: Context);
    /**
     * @hidden
     */
    private getUnwrappedTransactions;
    /**
     * transactions in the batch with their respective arguments
     */
    get transactions(): MapTxData<Args>;
    /**
     * @hidden
     */
    protected composeTx(): SubmittableExtrinsic<'promise', ISubmittableResult>;
    /**
     * @hidden
     */
    protected getProtocolFees(): Promise<BigNumber>;
    /**
     * @note batches can't be subsidized
     */
    supportsSubsidy(): boolean;
    /**
     * @hidden
     */
    protected handleExtrinsicSuccess(resolve: (value: ISubmittableResult | PromiseLike<ISubmittableResult>) => void, reject: (reason?: unknown) => void, receipt: ISubmittableResult): void;
}
//# sourceMappingURL=PolymeshTransactionBatch.d.ts.map